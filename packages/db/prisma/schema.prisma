// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    userId     String  @id @default(cuid())
    profileImg String?

    firstName String
    lastName  String?
    gender    String?

    email String @unique

    lastLoggedIn DateTime? @default(now())

    teachesAt     isTeacherAt[]
    ownsSubgroups isOwnerOf[]
    isStudentAt   isStudentAt[]

    messages Message[]
}

model Group {
    groupId          String  @id @default(cuid())
    groupName        String
    groupDescription String?

    groupImage String?

    type String

    active Boolean @default(true)

    createdAt DateTime @default(now())

    subgroups Subgroup[]

    teachers isTeacherAt[]
}

model Subgroup {
    subgroupId String

    group   Group  @relation(fields: [groupId], references: [groupId], onDelete: Cascade, onUpdate: Cascade)
    groupId String

    owners   isOwnerOf[]
    students isStudentAt[]

    messages Message[]

    createdAt DateTime @default(now())

    @@id([groupId, subgroupId])
    @@index([groupId])
}

model isTeacherAt {
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String

    group   Group  @relation(fields: [groupId], references: [groupId], onDelete: Cascade, onUpdate: Cascade)
    groupId String

    @@id([userId, groupId])
    @@index([userId])
    @@index([groupId])
}

model isStudentAt {
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String

    subgroup   Subgroup @relation(fields: [groupId, subgroupId], references: [groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    groupId    String
    subgroupId String

    @@id([userId, groupId, subgroupId])
    @@index([userId])
    @@index([groupId, subgroupId])
}

model isOwnerOf {
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String

    subgroup   Subgroup @relation(fields: [groupId, subgroupId], references: [groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    groupId    String
    subgroupId String

    @@id([userId, groupId, subgroupId])
    @@index([userId])
    @@index([groupId, subgroupId])
}

model Message {
    messageId String @id @default(cuid())

    author   User?   @relation(fields: [authorId], references: [userId], onDelete: SetNull, onUpdate: Cascade)
    authorId String?

    subgroup   Subgroup @relation(fields: [groupId, subgroupId], references: [groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    groupId    String
    subgroupId String

    content String

    createdAt DateTime  @default(now())
    updatedAt DateTime?

    @@index([authorId])
    @@index([groupId, subgroupId])
}

model ActionType {
    id          Int    @id @default(autoincrement())
    description String

    Event Event[]
}

model Event {
    id Int @id @default(autoincrement())

    actionType ActionType @relation(fields: [action], references: [id], onDelete: Restrict, onUpdate: Cascade)
    action     Int

    values Json

    createdAt DateTime @default(now())

    @@index([action])
}
