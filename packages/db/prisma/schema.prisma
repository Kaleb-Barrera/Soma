// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "sqlite"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    userId     String  @id @default(cuid())
    profileImg String?

    firstName String
    lastName  String?
    gender    String?

    email String? @unique

    lastLoggedIn DateTime? @default(now())

    teachesAt     isTeacherAt[]
    ownsSubgroups isOwnerOf[]
    isStudentAt   isStudentAt[]

    messages Message[]

    events Event[]
}

model Group {
    groupId          String  @id @default(cuid())
    groupName        String
    groupDescription String?

    groupImage String?

    createdAt DateTime @default(now())

    subgroups Subgroup[]

    teachers isTeacherAt[]

    events Event[]
}

model Subgroup {
    subgroupId String

    group   Group  @relation(fields: [groupId], references: [groupId], onDelete: Cascade, onUpdate: Cascade)
    groupId String

    owners   isOwnerOf[]
    students isStudentAt[]

    messages Message[]

    events Event[]

    createdAt DateTime @default(now())

    @@id([groupId, subgroupId])
    @@index([groupId])
}

model isTeacherAt {
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String

    group   Group  @relation(fields: [groupId], references: [groupId], onDelete: Cascade, onUpdate: Cascade)
    groupId String

    events Event[]

    @@id([userId, groupId])
    @@index([userId])
    @@index([groupId])
}

model isStudentAt {
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String

    subgroup   Subgroup @relation(fields: [groupId, subgroupId], references: [groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    groupId    String
    subgroupId String

    events Event[]

    @@id([userId, groupId, subgroupId])
    @@index([userId])
    @@index([groupId, subgroupId])
}

model isOwnerOf {
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String

    subgroup   Subgroup @relation(fields: [groupId, subgroupId], references: [groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    groupId    String
    subgroupId String

    events Event[]

    @@id([userId, groupId, subgroupId])
    @@index([userId])
    @@index([groupId, subgroupId])
}

model Message {
    messageId String @id @default(cuid())

    author   User?   @relation(fields: [authorId], references: [userId], onDelete: SetNull, onUpdate: Cascade)
    authorId String?

    subgroup   Subgroup @relation(fields: [groupId, subgroupId], references: [groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    groupId    String
    subgroupId String

    content String

    createdAt DateTime  @default(now())
    updatedAt DateTime?

    events Event[]

    @@index([authorId])
    @@index([groupId, subgroupId])
}

model eventType {
    id          Int    @id @default(autoincrement())
    description String

    events Event[]
}

model Event {
    id Int @id @default(autoincrement())

    type   eventType @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    typeId Int

    user   User?   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    userId String?

    group   Group?  @relation(fields: [groupId], references: [groupId], onDelete: Cascade, onUpdate: Cascade)
    groupId String?

    subgroup   Subgroup? @relation(fields: [subgroupId, groupId], references: [subgroupId, groupId], onDelete: Cascade, onUpdate: Cascade)
    subgroupId String?

    teacherEvents isTeacherAt? @relation(fields: [userId, groupId], references: [userId, groupId], onDelete: Cascade, onUpdate: Cascade)
    studentEvents isStudentAt? @relation(fields: [userId, groupId, subgroupId], references: [userId, groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)
    ownerEvents   isOwnerOf?   @relation(fields: [userId, groupId, subgroupId], references: [userId, groupId, subgroupId], onDelete: Cascade, onUpdate: Cascade)

    message   Message? @relation(fields: [messageId], references: [messageId], onDelete: Cascade, onUpdate: Cascade)
    messageId String?

    createdAt DateTime @default(now())

    @@index([typeId])
    @@index([userId])
    @@index([groupId])
    @@index([messageId])
    @@index([userId, groupId])
    @@index([subgroupId, groupId])
    @@index([userId, groupId, subgroupId])
}
